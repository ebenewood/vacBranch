/* BGC 'background-color' function requests a new Date, parses the new date into a numeric value, makes the numeric value an string of characters, loops over that string of characters- each time calling the COLOR function, and passes the value returned by the COLOR function to an array: colorArr.

Example:
new Date = Mon Aug 15 1977 19:25:31 GMT-0700 (PDT)
Date.parse = 240546331000
this gets turned into a string '240546331000'
this string gets made into a bunch of color values based on the COLOR function which are passed to an array:

colorArr = ["blue", "black", "gray", "yellow", "green", "orchid", "orchid", "gray", "blue", "red", "red", "red", "red", "red"] */


function bgc() {
	userDate = new Date();
	userDate = Date.parse(userDate);
	userDate = userDate.toString();
	colorArr = [];

	for (i = 0; i <= userDate.length; i++) {
		x = color(userDate.charAt(i));
		colorArr.push(x);

	};
};

/* COLOR function assigns colors to a string generated by the BGC function*/

function color (num) {
 if ( num == 0) {
			return 'red';
	} else if
		( num == 1) {
		 	return 'blue';
	} else if
		( num == 2) {
			return 'green';
	} else if
		( num == 3) {
			return 'purple';
	} else if
		( num == 4) {
			return 'black';
	} else if
		( num == 5) {
			return 'gray';
	} else if
		( num == 6) {
			return 'orange';
	} else if
		( num == 7) {
			return 'brown';
	} else if
		( num == 8) {
			return 'yellow';
	} else if
		( num == 9) {
			return 'orchid';
		};
};

/*The ORIENT functions will be used to control the start positions of some boxes made in the background later on in the script*/

/* ORIENTX function is like flipping a coin; it takes the character at an index of a string generated by the BGC function; if the character is even, the variable posX is 'top', if odds, the variable posX is 'bottom'.   */

function orientX(dateCharAt) {

	if (dateCharAt % 2 == 0) {
		posX = 'top';
	} else {
		posX = 'bottom';
	};
};

/*ORIENTY is just ORIENTX, the only difference is it controls a different variable, posY; and this variable can be either 'left' or 'right' */

function orientY(dateCharAt) {

	if (dateCharAt % 2 == 0) {
		posY = 'left';
	} else {
		posY = 'right';
	};
};

/* divMaker function creates a bunch of divs based on a BGC, COLOR, and ORIENT(X&Y) functions.

The 'add' family of variables is declared. These variables are added to each time the loop circles around, and they are added to by a character of the Date string generated by BGC function.

The loop is creating <divs> which are pushed
left or right by the ADDX variable,
up or down by the ADDY variable,
made incrementaly wider by the ADDWIDTH variable,
made incrementaly taller by the ADDHEIGHT variable.

There are two loops nested inside one another. All that is happening is the one on top (using the j variable as a counter) is asking the one underneath (using the i variable as a counter) to do what it is doing 100 more (j <= 100).

Each time 'i counter' loop cycles through it sends the <div> it makes to the <div class='loopbox'> portion of index.html.
*/


function divMaker () {

  var addx = 1;
	var addy = 1;
	var addwidth = 1;
	var addheight = 1;

  var divAttr = '';

	for (j = 0; j <= 9; j++) {
		for (i = 0; i <= (colorArr.length - 1); i++) {

			divAttr +=
      '<div style="position: fixed;' +
      posX +
      ': ' +
      (addx += parseInt(userDate.charAt(1))) +
      'px;' +
      posY +
      ': ' +
      (addy += parseInt(userDate.charAt(2))) +
      'px; background-color: ' +
      colorArr[i] +
      '; width:' +
      (addwidth += parseInt(userDate.charAt(3))) +
      'px; height:' +
      (addheight += parseInt(userDate.charAt(3))) +
      'px;" class="blocks"></div>'

    };
  };
  return divAttr;
};

 /*%%%%%%%%%%%%%%%%%%%%*/
/*-._.-==(JQUERY!)_.-==*/
/*%%%%%%%%%%%%%%%%%%%%*/

$(function () {

/*BGC is called and ORIENTX & Y are called on character positions (9 & 8) which often have different values (seconds and tens of seconds)

DIVMAKER function is called to populate the <div class="loopbox"> with a bunch of divs.

*/


  bgc();
	orientX(parseInt(userDate.charAt(9)));
	orientY(parseInt(userDate.charAt(8)));


  $('.loopbox').append(divMaker());


/*The body has a fadeIn for a cute effect.

Logical conditions are fashioned by the user input, and an array.

The array keeps track of the user's answers; yes = (1) or no = (0).

Based on the composition of the array and the user input, the selection process continues.

After a few questions, the <divs> with .blocks class are given a background image.


After a certain number of elements are added to the evalArr array, or the user inputs 'reset', the evalArr array is hidden, cleared, a new date is generated with BGC, ORIENT(X&Y) are called to give a new chance for positioning the .block divs, DIVMAKER loads the divs into the new empty .loopbox, and .loopbox div fades back in, and the original question of the series prompts the user again.*/

	$('body').fadeIn(500);

	var evalArr = [];

	$('form#questions').submit(function (event) {
		event.preventDefault();


    if ($('input#one').val().toLowerCase() == 'reset' | evalArr.length > 3) {

        evalArr = [];
        $('.loopbox').hide();
        $('.loopbox').empty();

        bgc();
      	orientX(parseInt(userDate.charAt(9)));
      	orientY(parseInt(userDate.charAt(8)));
        $('.loopbox').append(divMaker());
        $('.loopbox').fadeIn(400);

        $('h1').text('bored?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.length <= 0) {
				evalArr.push(0);
				$('h1').text('wish you weren\'t you?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.length <= 0) {
			  evalArr.push(1);
			  $('h1').text('antsy?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1') {
				evalArr.push(1);
				$('h1').text('wanderlust?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1') {
				evalArr.push(0);
				$('h1').text('feeling like a jelly bean?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0') {
        evalArr.push(1);
        $('h1').text('a beast?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0') {
				evalArr.push(0);
				$('h1').text('a different point of view?');

		} else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1,1') {
				evalArr.push(1);
				$('h1').text('endless?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1,1') {
				evalArr.push(0);
				$('h1').text('afraid of depths?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0,0') {
  			evalArr.push(0);
  			$('h1').text('any change?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0,0') {
  			evalArr.push(1);
  			$('h1').text('high dimensional?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1,0') {
  			evalArr.push(0);
  			$('h1').text('stretch those legs?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1,0') {
  			evalArr.push(1);
  			$('h1').text('and popcorn?');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0,1') {
				evalArr.push(0);
				$('h1').text('robot?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0,1') {
				evalArr.push(1);

				$('h1').text('of burden?');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0,0,1') {
        $('h1').text('hyper-right & forever-4d');

        $('.blocks').css('background-image', 'url(img/hype.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0,0,1') {
        $('h1').text('without a shadow of a doubt...');

        $('.blocks').css('background-image', 'url(img/pup.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1,0,0') {
        $('h1').text('take a hike!');

        $('.blocks').css('background-image', 'url(img/mons.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1,0,0') {
        $('h1').text('check on the cat already!');

        $('.blocks').css('background-image', 'url(img/cat.jpeg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1,0,1') {
        $('h1').text('box office sauce fest');

        $('.blocks').css('background-image', 'url(img/movie.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1,0,1') {
        $('h1').text('stay comfy');

        $('.blocks').css('background-image', 'url(img/couch.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1,1,0') {
				$('h1').text('under the sea.');

			  $('.blocks').css('background-image', 'url(img/sea.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1,1,0') {
				$('h1').text('edgy beach life');

			  $('.blocks').css('background-image', 'url(img/beach.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '1,1,1') {
				$('h1').text('7 seas sailing sounds sweet.');

			  $('.blocks').css('background-image', 'url(img/sail.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '1,1,1') {
				$('h1').text('onward starchild!');

			  $('.blocks').css('background-image', 'url(img/space.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0,0,0') {
  			$('h1').text('certified communications archeologist.');

        $('.blocks').css('background-image', 'url(img/cca.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0,0,0') {
  			$('h1').text('it is what it is...');

        $('.blocks').css('background-image', 'url(img/sis.png)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0,1,1') {
  			$('h1').text('the future is at hand!');

        $('.blocks').css('background-image', 'url(img/mule.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0,1,1') {
  			$('h1').text('G D Em');

        $('.blocks').css('background-image', 'url(img/free.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'yes' && evalArr.toString() == '0,1,0') {
				$('h1').text('0110100001101001');

        $('.blocks').css('background-image', 'url(img/robo.jpg)');
        evalArr.push('U+2404');

    } else if
      ($('input#one').val().toLowerCase() == 'no' && evalArr.toString() == '0,1,0') {
				$('h1').text('time travel!');

        $('.blocks').css('background-image', 'url(img/time.jpg)');
        evalArr.push('U+2404');

    } else {
			$('h1').text('yes | no | reset');
			$('input#one').text('');

		};
	});
});
